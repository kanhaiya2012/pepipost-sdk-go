/*
 * pepipost_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package models_pkg



/*
 * Structure for the custom type From
 */
type From struct {
    Email           *string         `json:"email,omitempty" form:"email,omitempty"` //TODO: Write general description for this field
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Settings
 */
type Settings struct {
    Footer            *bool           `json:"footer,omitempty" form:"footer,omitempty"` //enable or disable footer
    ClickTrack        *bool           `json:"click_track,omitempty" form:"click_track,omitempty"` //enable or disable click tracking
    OpenTrack         *bool           `json:"open_track,omitempty" form:"open_track,omitempty"` //enable or disable open tracking
    UnsubscribeTrack  *bool           `json:"unsubscribe_track,omitempty" form:"unsubscribe_track,omitempty"` //enable or disable unsubscribe tracking
    Hepf              *bool           `json:"hepf,omitempty" form:"hepf,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Content
 */
type Content struct {
    Type            TypeEnum        `json:"type,omitempty" form:"type,omitempty"` //content in text/plain format
    Value           *string         `json:"value,omitempty" form:"value,omitempty"` //HTML content to be sent in your email
}

/*
 * Structure for the custom type Attachments
 */
type Attachments struct {
    Content         *string         `json:"content,omitempty" form:"content,omitempty"` //Base64 encoded value of the attached file
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //filename of attachments
}

/*
 * Structure for the custom type EmailStruct
 */
type EmailStruct struct {
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Name of recipient
    Email           *string         `json:"email,omitempty" form:"email,omitempty"` //Email of recipient
}

/*
 * Structure for the custom type Personalizations
 */
type Personalizations struct {
    Attributes      *interface{}    `json:"attributes,omitempty" form:"attributes,omitempty"` //Dynamic attributes
    Headers         *interface{}    `json:"headers,omitempty" form:"headers,omitempty"` //Dynamic headers attributes
    Attachments     []*Attachments  `json:"attachments,omitempty" form:"attachments,omitempty"` //Attachments to individuals recipient
    To              []*EmailStruct  `json:"to" form:"to"` //To email-address
    Cc              []*EmailStruct  `json:"cc,omitempty" form:"cc,omitempty"` //CC email-address
    Bcc             []*EmailStruct  `json:"bcc,omitempty" form:"bcc,omitempty"` //Bcc email-addresses
    TokenTo         *string         `json:"token_to,omitempty" form:"token_to,omitempty"` //token to which is json string
    TokenCc         *string         `json:"token_cc,omitempty" form:"token_cc,omitempty"` //token cc which is json string
    TokenBcc        *string         `json:"token_bcc,omitempty" form:"token_bcc,omitempty"` //token bcc which is json string
}

/*
 * Structure for the custom type Send
 */
type Send struct {
    ReplyTo          *string         `json:"reply_to,omitempty" form:"reply_to,omitempty"` //email address which recipients can reply to.
    From             From            `json:"from" form:"from"` //email address representing the sender of the mail
    Subject          string          `json:"subject" form:"subject"` //Subject line of the email
    TemplateId       *int64          `json:"template_id,omitempty" form:"template_id,omitempty"` //ID of the template to be used for sending the mail
    Content          []*Content      `json:"content" form:"content"` //content in text/plain format
    Attachments      []*Attachments  `json:"attachments,omitempty" form:"attachments,omitempty"` //attachment information
    Personalizations []*Personalizations `json:"personalizations" form:"personalizations"` //to recipient with some personalized data like to address, attachments and attributes
    Settings         *Settings       `json:"settings,omitempty" form:"settings,omitempty"` //Enable/Disable settings like click, open and unsubscribe track
    Tags             *[]string       `json:"tags,omitempty" form:"tags,omitempty"` //define custom tags to organize your emails
    LintPayload      *bool           `json:"lint_payload,omitempty" form:"lint_payload,omitempty"` //TODO: Write general description for this field
    Schedule         *int64          `json:"schedule,omitempty" form:"schedule,omitempty"` //schedule the time of email delivery
    Bcc              []*EmailStruct  `json:"bcc,omitempty" form:"bcc,omitempty"` //Global bcc can be defined here
}
